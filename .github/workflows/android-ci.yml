name: Android CI/CD

on:
  push:
    branches: [ main, develop, staging ]
    paths: 
      - 'android/**'
      - '.github/workflows/android-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'android/**'

env:
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '34'
  NDK_VERSION: '25.1.8937393'

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./android
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Run lint
      run: ./gradlew lintDebug
      
    - name: Upload lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: android/app/build/reports/lint-results-debug.html

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./android
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Generate test report
      run: ./gradlew jacocoTestReport
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          android/app/build/reports/tests/
          android/app/build/reports/jacoco/

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    defaults:
      run:
        working-directory: ./android
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Create debug keystore
      run: |
        mkdir -p app/
        keytool -genkey -v -keystore app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
        
    - name: Build debug APK
      if: github.ref != 'refs/heads/main'
      run: ./gradlew assembleDebug
      
    - name: Build staging APK
      if: github.ref == 'refs/heads/staging'
      run: ./gradlew assembleStaging
      
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ github.ref_name }}
        path: |
          android/app/build/outputs/apk/**/*.apk
